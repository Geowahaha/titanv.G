//+------------------------------------------------------------------+
//|                                     Strategy: Titan_BoonBot1.mq4 |
//|                                       Created with EABuilder.com |
//|                                        https://www.eabuilder.com |
//+------------------------------------------------------------------+
#property copyright "Created with EABuilder.com"
#property link      "https://www.eabuilder.com"
#property version   "1.00"
#property description "titan + three bar"

#include <stdlib.mqh>
#include <stderror.mqh>


extern double Multiple = 1.5;
extern int TP_Follow = 300;
extern int TP_Multiple1 = 200;
extern int TP_Multiple2 = 100;
extern double Start_Lot = 0.01;
extern bool Buy_Enable = true;
extern bool Sell_Enable = true;

extern int Gap_Buy = 400;
extern int Gap_Sell = 400;
extern int TrigerDown = 4;
extern int Expand = 3;
extern double Momentum_Low = 99.88;
extern double Momentum_High = 100.12;
extern double Max_TradeSize = 2;
extern int Time_Interval = 15;
extern int Momentum_Period = 140;

int LotDigits; //initialized in OnInit
extern int MagicNumber = 1905941;
extern int NextOpenTradeAfterBars = 1; //next open trade after time
extern int MaxSlippage = 5; //slippage, adjusted in OnInit
datetime NextTime[4]; //initialized to 0, used in function TimeSignal
int MaxOpenTrades = 1000;
extern int MaxLongTrades = 12;
extern int MaxShortTrades = 12;
int MaxPendingOrders = 1000;
int MaxLongPendingOrders = 1000;
int MaxShortPendingOrders = 1000;
bool Hedging = false;
int OrderRetry = 5; //# of retries if sending order returns error
int OrderWait = 5; //# of seconds to wait if sending order returns error
double myPoint; //initialized in OnInit

//--- Custom functions ----------------------------------------------- 

int Open_gap_buy()
   {
    double b_count=TradesCount(ORDER_TYPE_BUY),s_count=TradesCount(ORDER_TYPE_SELL);
    int i=1;
    if(b_count > TrigerDown)
      i = Expand;
      
  return(i);   
   }
   
int Open_gap_sell()
   {
    double b_count=TradesCount(ORDER_TYPE_BUY),s_count=TradesCount(ORDER_TYPE_SELL);
    int i=1;
    if(s_count > TrigerDown)
      i = Expand;
      
  return(i);   
   }
double OpenTradeSize(int dir)
  {
   double result = 0;
   
   int total = OrdersTotal();
   if(dir == 1)
   {
   for(int i = 0; i < total; i++)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) == false) break;
      if(OrderMagicNumber() != MagicNumber || OrderSymbol() != Symbol() || OrderType() != OP_BUY) continue;
      result += OrderLots();
     }
    }
     if(dir == -1)
   {
   
   for(i = 0; i < total; i++)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) == false) break;
      if(OrderMagicNumber() != MagicNumber || OrderSymbol() != Symbol() || OrderType() != OP_SELL) continue;
      result += OrderLots();
     }
    }     
   return(result);
  } 
double RoundDown (double number,int digit)
{
double lots;
      lots =  MathFloor(number*MathPow(10,digit))/MathPow(10,digit);
      return (lots);
}
double OpenProfit(int direction,int OrderNo)
  {
   double result = 0;
  
  if(OrderSelect(OrderNo, SELECT_BY_POS)==true) 
  if(OrderSymbol() != Symbol() || OrderMagicNumber() != MagicNumber)
  if((direction < 0 && OrderType() == OP_BUY) || (direction > 0 && OrderType() == OP_SELL))
    result = OrderProfit();
  else 
    Print("OrderSelect returned the error of ",GetLastError());
    
   return(result);
   }

//--- End of custom functions ----------------------------------------

bool TimeSignal(int i, int hh, int mm, int ss, bool time_repeat, int repeat_interval)
  {
   bool ret = false;
   if(!time_repeat)
      repeat_interval = 86400; //24 hours
   datetime ct = TimeCurrent();
   datetime dt = StringToTime(IntegerToString(hh)+":"+IntegerToString(mm))+ss;
   if(ct > dt)
      dt += (datetime)MathCeil((ct - dt) * 1.0 / repeat_interval) * repeat_interval; //move dt to the future
   if(ct == dt)
      dt += repeat_interval;
   if(NextTime[i] == 0)
      NextTime[i] = dt; //set NextTime to the future at first run
   if(ct >= NextTime[i] && NextTime[i] > 0) //reached NextTime
     {
      if(ct - NextTime[i] < 3600) //not too far
         ret = true;
      NextTime[i] = dt; //move NextTime to the future again
     }
   return(ret);
  }

void myAlert(string type, string message)
  {
   if(type == "print")
      Print(message);
   else if(type == "error")
     {
      Print(type+" | Titan_BoonBot1 @ "+Symbol()+","+IntegerToString(Period())+" | "+message);
     }
   else if(type == "order")
     {
     }
   else if(type == "modify")
     {
     }
  }

double MM_Size(int act)
{
   double lotstart=Start_Lot;
   double lotSizeBuy=0;
   double lotSizeSell=0;
   double b_count=TradesCount(ORDER_TYPE_BUY),s_count=TradesCount(ORDER_TYPE_SELL);
            if (b_count < 1 && act == 1 && Multiple > 1) 
                  return(lotstart);
            if(s_count < 1 && act == -1 && Multiple > 1)  
                  return(lotstart);

            if (b_count >= 1 && act == 1 && Multiple > 1)
                     {
                        lotSizeBuy = lotstart * MathPow(Multiple,(b_count));
                        lotstart = RoundDown(lotSizeBuy,2);    
                     }
             if (s_count >= 1 && act == -1 && Multiple > 1)
                     {
                        lotSizeSell = lotstart * MathPow(Multiple,(s_count));
                        lotstart = RoundDown(lotSizeSell,2);
                     }
   return(lotstart);   
}

int TradesCount(int type) //returns # of open trades for order type, current symbol and magic number
  {
   int result = 0;
   int total = OrdersTotal();
   for(int i = 0; i < total; i++)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) == false) continue;
      if(OrderMagicNumber() != MagicNumber || OrderSymbol() != Symbol() || OrderType() != type) continue;
      result++;
     }
   return(result);
  }

double OpenTradeSize()
  {
   double result = 0;
   int total = OrdersTotal();
   for(int i = 0; i < total; i++)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) == false) break;
      if(OrderMagicNumber() != MagicNumber || OrderSymbol() != Symbol() || (OrderType() != OP_BUY && OrderType() != OP_SELL)) continue;
      result += OrderLots();
     }
   return(result);
  }

double LastTradePrice(int direction)
  {
   double result = 0;
   for(int i = OrdersTotal()-1; i >= 0; i--)
     {
      if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
      if(OrderType() > 1) continue;
      if((direction < 0 && OrderType() == OP_BUY) || (direction > 0 && OrderType() == OP_SELL)) continue;
      if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
        {
         result = OrderOpenPrice();
         break;
        }
     } 
   return(result);
  }

datetime LastOpenTradeTime()
  {
   datetime result = 0;
   for(int i = OrdersTotal()-1; i >= 0; i--)
     {
      if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
      if(OrderType() > 1) continue;
      if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
        {
         result = OrderOpenTime();
         break;
        }
     } 
   return(result);
  }

bool SelectLastHistoryTrade()
  {
   int lastOrder = -1;
   int total = OrdersHistoryTotal();
   for(int i = total-1; i >= 0; i--)
     {
      if(!OrderSelect(i, SELECT_BY_POS, MODE_HISTORY)) continue;
      if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
        {
         lastOrder = i;
         break;
        }
     } 
   return(lastOrder >= 0);
  }

double TotalOpenProfit(int direction)
  {
   double result = 0;
   int total = OrdersTotal();
   for(int i = 0; i < total; i++)   
     {
      if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
      if(OrderSymbol() != Symbol() || OrderMagicNumber() != MagicNumber) continue;
      if((direction < 0 && OrderType() == OP_BUY) || (direction > 0 && OrderType() == OP_SELL)) continue;
      result += OrderProfit();
     }
   return(result);
  }

datetime LastOpenTime()
  {
   datetime opentime1 = 0, opentime2 = 0;
   if(SelectLastHistoryTrade())
      opentime1 = OrderOpenTime();
   opentime2 = LastOpenTradeTime();
   if (opentime1 > opentime2)
      return opentime1;
   else
      return opentime2;
  }

int myOrderSend(int type, double price, double volume, string ordername) //send order, return ticket ("price" is irrelevant for market orders)
  {
   if(!IsTradeAllowed()) return(-1);
   int ticket = -1;
   int retries = 0;
   int err = 0;
   int long_trades = TradesCount(OP_BUY);
   int short_trades = TradesCount(OP_SELL);
   int long_pending = TradesCount(OP_BUYLIMIT) + TradesCount(OP_BUYSTOP);
   int short_pending = TradesCount(OP_SELLLIMIT) + TradesCount(OP_SELLSTOP);
   string ordername_ = ordername;
   if(ordername != "")
      ordername_ = "("+ordername+")";
   //test Hedging
   if(!Hedging && ((type % 2 == 0 && short_trades + short_pending > 0) || (type % 2 == 1 && long_trades + long_pending > 0)))
     {
      myAlert("print", "Order"+ordername_+" not sent, hedging not allowed");
      return(-1);
     }
   //test maximum trades
   if((type % 2 == 0 && long_trades >= MaxLongTrades)
   || (type % 2 == 1 && short_trades >= MaxShortTrades)
   || (long_trades + short_trades >= MaxOpenTrades)
   || (type > 1 && type % 2 == 0 && long_pending >= MaxLongPendingOrders)
   || (type > 1 && type % 2 == 1 && short_pending >= MaxShortPendingOrders)
   || (type > 1 && long_pending + short_pending >= MaxPendingOrders)
   )
     {
      myAlert("print", "Order"+ordername_+" not sent, maximum reached");
      return(-1);
     }
   //prepare to send order
   while(IsTradeContextBusy()) Sleep(100);
   RefreshRates();
   if(type == OP_BUY)
      price = Ask;
   else if(type == OP_SELL)
      price = Bid;
   else if(price < 0) //invalid price for pending order
     {
      myAlert("order", "Order"+ordername_+" not sent, invalid price for pending order");
	  return(-1);
     }
   int clr = (type % 2 == 1) ? clrRed : clrBlue;
   while(ticket < 0 && retries < OrderRetry+1)
     {
      ticket = OrderSend(Symbol(), type, NormalizeDouble(volume, LotDigits), NormalizeDouble(price, Digits()), MaxSlippage, 0, 0, ordername, MagicNumber, 0, clr);
      if(ticket < 0)
        {
         err = GetLastError();
         myAlert("print", "OrderSend"+ordername_+" error #"+IntegerToString(err)+" "+ErrorDescription(err));
         Sleep(OrderWait*1000);
        }
      retries++;
     }
   if(ticket < 0)
     {
      myAlert("error", "OrderSend"+ordername_+" failed "+IntegerToString(OrderRetry+1)+" times; error #"+IntegerToString(err)+" "+ErrorDescription(err));
      return(-1);
     }
   string typestr[6] = {"Buy", "Sell", "Buy Limit", "Sell Limit", "Buy Stop", "Sell Stop"};
   myAlert("order", "Order sent"+ordername_+": "+typestr[type]+" "+Symbol()+" Magic #"+IntegerToString(MagicNumber));
   return(ticket);
  }

void myOrderClose(int type, double volumepercent, string ordername) //close open orders for current symbol, magic number and "type" (OP_BUY or OP_SELL)
  {
   if(!IsTradeAllowed()) return;
   if (type > 1)
     {
      myAlert("error", "Invalid type in myOrderClose");
      return;
     }
   bool success = false;
   int retries = 0;
   int err = 0;
   string ordername_ = ordername;
   if(ordername != "")
      ordername_ = "("+ordername+")";
   int total = OrdersTotal();
   int orderList[][2];
   int orderCount = 0;
   int i;
   for(i = 0; i < total; i++)
     {
      while(IsTradeContextBusy()) Sleep(100);
      if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
      if(OrderMagicNumber() != MagicNumber || OrderSymbol() != Symbol() || OrderType() != type) continue;
      orderCount++;
      ArrayResize(orderList, orderCount);
      orderList[orderCount - 1][0] = (int)OrderOpenTime();
      orderList[orderCount - 1][1] = OrderTicket();
     }
   if(orderCount > 0)
      ArraySort(orderList, WHOLE_ARRAY, 0, MODE_ASCEND);
   for(i = 0; i < orderCount; i++)
     {
      if(!OrderSelect(orderList[i][1], SELECT_BY_TICKET, MODE_TRADES)) continue;
      while(IsTradeContextBusy()) Sleep(100);
      RefreshRates();
      double price = (type == OP_SELL) ? Ask : Bid;
      double volume = NormalizeDouble(OrderLots()*volumepercent * 1.0 / 100, LotDigits);
      if (NormalizeDouble(volume, LotDigits) == 0) continue;

      success = false; retries = 0;
      while(!success && retries < OrderRetry+1)
        {
         success = OrderClose(OrderTicket(), volume, NormalizeDouble(price, Digits()), MaxSlippage, clrWhite);
         if(!success)
           {
            err = GetLastError();
            myAlert("print", "OrderClose"+ordername_+" failed; error #"+IntegerToString(err)+" "+ErrorDescription(err));
            Sleep(OrderWait*1000);
           }
         retries++;
        }
      if(!success)
        {
         myAlert("error", "OrderClose"+ordername_+" failed "+IntegerToString(OrderRetry+1)+" times; error #"+IntegerToString(err)+" "+ErrorDescription(err));
         return;
       }
     }
   string typestr[6] = {"Buy", "Sell", "Buy Limit", "Sell Limit", "Buy Stop", "Sell Stop"};
   if(success) myAlert("order", "Orders closed"+ordername_+": "+typestr[type]+" "+Symbol()+" Magic #"+IntegerToString(MagicNumber));
  }

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {   
   //initialize myPoint
   myPoint = Point();
   if(Digits() == 5 || Digits() == 3)
     {
      myPoint *= 10;
      MaxSlippage *= 10;
     }
   //initialize LotDigits
   double LotStep = MarketInfo(Symbol(), MODE_LOTSTEP);
   if(NormalizeDouble(LotStep, 3) == round(LotStep))
      LotDigits = 0;
   else if(NormalizeDouble(10*LotStep, 3) == round(10*LotStep))
      LotDigits = 1;
   else if(NormalizeDouble(100*LotStep, 3) == round(100*LotStep))
      LotDigits = 2;
   else LotDigits = 3;
   int i;
   //initialize NextTime
   for (i = 0; i < ArraySize(NextTime); i++)
      NextTime[i] = 0;
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   int ticket = -1;
   double price;   
   double TotalOpenProfitLong = TotalOpenProfit(1);
   double TotalOpenProfitShort = TotalOpenProfit(-1);
   
   
   //Close Long Positions (CloseF)
   if(TradesCount(OP_BUY) == 1 //Long Trades is equal to fixed value
   && TotalOpenProfitLong > OpenTradeSize(1) * TP_Follow //Custom Code
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_BUY, 100, "CloseF");
      else //not autotrading => only send alert
         myAlert("order", "CloseF");
     }
   
   //Close Long Positions (CloseM1)
   if(TradesCount(OP_BUY) > 1 //Long Trades > fixed value
   && TotalOpenProfitLong > OpenTradeSize(1) * TP_Multiple1 //Custom Code
   && TradesCount(OP_BUY) <= TrigerDown //Long Trades <= fixed value
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_BUY, 100, "CloseM1");
      else //not autotrading => only send alert
         myAlert("order", "CloseM1");
     }
   
   //Close Long Positions (CloseM2)
   if(TradesCount(OP_BUY) > TrigerDown //Long Trades > fixed value
   && TotalOpenProfitLong > OpenTradeSize(1) * TP_Multiple2 //Custom Code
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_BUY, 100, "CloseM2");
      else //not autotrading => only send alert
         myAlert("order", "CloseM2");
     }
   
   //Close Short Positions (CloseF)
   if(TradesCount(OP_SELL) == 1 //Short Trades is equal to fixed value
   && TotalOpenProfitShort > OpenTradeSize(-1) * TP_Follow //Custom Code
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_SELL, 100, "CloseF");
      else //not autotrading => only send alert
         myAlert("order", "CloseF");
     }
   
   //Close Short Positions (CloseM1)
   if(TradesCount(OP_SELL) > 1 //Short Trades > fixed value
   && TotalOpenProfitShort > OpenTradeSize(-1) * TP_Multiple1 //Custom Code
   && TradesCount(OP_SELL) <= TrigerDown //Short Trades <= fixed value
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_SELL, 100, "CloseM1");
      else //not autotrading => only send alert
         myAlert("order", "CloseM1");
     }
   
   //Close Short Positions (CloseM2)
   if(TradesCount(OP_SELL) > TrigerDown //Short Trades > fixed value
   && TotalOpenProfitShort > OpenTradeSize(-1) * TP_Multiple2 //Custom Code
   )
     {   
      if(IsTradeAllowed())
         myOrderClose(OP_SELL, 100, "CloseM2");
      else //not autotrading => only send alert
         myAlert("order", "CloseM2");
     }
   
   //Open Buy Order (Call Function)
   RefreshRates();
   if(LastTradePrice(1) < LastTradePrice(-1) //Last Open Trade Price (Long) < Last Open Trade Price (Short)
   && TotalOpenProfitLong > TotalOpenProfitShort //Total Open Profit (Long) > Total Open Profit (Short)
   && Close[1] > 1000 //Candlestick Close > fixed value
   && Bid > Ask //Price > Price
   && OpenTradeSize() > 100000 //Open Trade Size > fixed value
   )
     {
      RefreshRates();
      price = Ask;
      if(TimeCurrent() - LastOpenTime() < NextOpenTradeAfterBars * PeriodSeconds()) return; //next open trade after time after previous trade's open   
      if(IsTradeAllowed())
        {
         ticket = myOrderSend(OP_BUY, price, MM_Size(1), "Call Function");
         if(ticket <= 0) return;
        }
      else //not autotrading => only send alert
         myAlert("order", "Call Function");
     }
   
   //Open Buy Order (TitanBuy), instant signal is tested first
   if(TimeSignal(0, 00, 00, 00, true, Time_Interval * 60) //Send order at time
   && Buy_Enable == true //Custom Code
   && Close[1] < Open[1] //Candlestick Close < Candlestick Open
   && TradesCount(OP_BUY) == 0 //Long Trades is equal to fixed value
   && iMomentum(NULL, PERIOD_CURRENT, Momentum_Period, PRICE_CLOSE, 0) < Momentum_Low //Momentum < fixed value
   && OpenTradeSize() <= Max_TradeSize //Open Trade Size <= fixed value
   )
     {
      RefreshRates();
      price = Ask;
      if(TimeCurrent() - LastOpenTime() < NextOpenTradeAfterBars * PeriodSeconds()) return; //next open trade after time after previous trade's open   
      if(IsTradeAllowed())
        {
         ticket = myOrderSend(OP_BUY, price, MM_Size(1), "TitanBuy");
         if(ticket <= 0) return;
        }
      else //not autotrading => only send alert
         myAlert("order", "TitanBuy");
     }
   
   //Open Buy Order (TitanWar_Start), instant signal is tested first
   if(TimeSignal(1, 00, 00, 00, true, Time_Interval * 60) //Send order at time
   && Buy_Enable == true //Custom Code
   && Close[1] < Close[2] //Candlestick Close < Candlestick Close
   && Close[2] < Close[3] //Candlestick Close < Candlestick Close
   && TradesCount(OP_BUY) >= 1 //Long Trades >= fixed value
   && Ask <= LastTradePrice(1) - (Gap_Buy * myPoint * Open_gap_buy()) //Custom Code
   && OpenTradeSize() <= Max_TradeSize //Open Trade Size <= fixed value
   )
     {
      RefreshRates();
      price = Ask;
      if(TimeCurrent() - LastOpenTime() < NextOpenTradeAfterBars * PeriodSeconds()) return; //next open trade after time after previous trade's open   
      if(IsTradeAllowed())
        {
         ticket = myOrderSend(OP_BUY, price, MM_Size(1), "TitanWar_Start");
         if(ticket <= 0) return;
        }
      else //not autotrading => only send alert
         myAlert("order", "TitanWar_Start");
     }
   
   //Open Sell Order (TitanWar_Sell), instant signal is tested first
   if(TimeSignal(2, 00, 00, 00, true, Time_Interval * 1) //Send order at time
   && Sell_Enable == true //Custom Code
   && Close[1] > Open[1] //Candlestick Close > Candlestick Open
   && TradesCount(OP_SELL) == 0 //Short Trades is equal to fixed value
   && iMomentum(NULL, PERIOD_CURRENT, Momentum_Period, PRICE_CLOSE, 0) > Momentum_High //Momentum > fixed value
   && OpenTradeSize() <= Max_TradeSize //Open Trade Size <= fixed value
   )
     {
      RefreshRates();
      price = Bid;
      if(TimeCurrent() - LastOpenTime() < NextOpenTradeAfterBars * PeriodSeconds()) return; //next open trade after time after previous trade's open   
      if(IsTradeAllowed())
        {
         ticket = myOrderSend(OP_SELL, price, MM_Size(-1), "TitanWar_Sell");
         if(ticket <= 0) return;
        }
      else //not autotrading => only send alert
         myAlert("order", "TitanWar_Sell");
     }
   
   //Open Sell Order (TitanWar_Start), instant signal is tested first
   if(TimeSignal(3, 00, 00, 00, true, Time_Interval * 60) //Send order at time
   && Sell_Enable == true //Custom Code
   && Close[1] > Close[2] //Candlestick Close > Candlestick Close
   && Close[2] > Close[3] //Candlestick Close > Candlestick Close
   && TradesCount(OP_SELL) >= 1 //Short Trades >= fixed value
   && Bid >= LastTradePrice(-1) + (Gap_Sell  * myPoint * Open_gap_sell()) //Custom Code
   && OpenTradeSize() <= Max_TradeSize //Open Trade Size <= fixed value
   )
     {
      RefreshRates();
      price = Bid;
      if(TimeCurrent() - LastOpenTime() < NextOpenTradeAfterBars * PeriodSeconds()) return; //next open trade after time after previous trade's open   
      if(IsTradeAllowed())
        {
         ticket = myOrderSend(OP_SELL, price, MM_Size(-1), "TitanWar_Start");
         if(ticket <= 0) return;
        }
      else //not autotrading => only send alert
         myAlert("order", "TitanWar_Start");
     }
  }
//+------------------------------------------------------------------+
